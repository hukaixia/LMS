<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://www.mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="jmu.hw.dao.FineMapper">
  <resultMap id="BaseResultMap" type="jmu.hw.po.Fine">
    <id column="fine_id" jdbcType="INTEGER" property="fineId" />
    <result column="reader_id" jdbcType="VARCHAR" property="readerId" />
    <result column="admin_id" jdbcType="CHAR" property="adminId" />
    <result column="book_id" jdbcType="INTEGER" property="bookId" />
    <result column="fine_time" jdbcType="DATE" property="fineTime" />
    <result column="fine_total" jdbcType="DECIMAL" property="fineTotal" />
  </resultMap>
   <resultMap id="BaseResultMapWithAll" type="jmu.hw.po.Fine">
    <id column="fine_id" jdbcType="INTEGER" property="fineId" />
    <result column="reader_id" jdbcType="VARCHAR" property="readerId" />
    <result column="admin_id" jdbcType="CHAR" property="adminId" />
    <result column="book_id" jdbcType="INTEGER" property="bookId" />
    <result column="fine_time" jdbcType="DATE" property="fineTime" />
    <result column="fine_total" jdbcType="DECIMAL" property="fineTotal" />
    <association property="book" javaType="Book">
        <id column="book_id" property="bookId"/>
        <result column="book_callno" property="bookCallno"/>
         <association property="bookDesc" javaType="BookDesc">
          <id column="book_callno" property="bookCallno"/>
          <result column="book_name" property="bookName"/>
         </association>
    </association>
    <association property="reader" javaType="Reader">
          <id column="reader_id" property="readerId"/>
          <result column="user_name" property="userName"/>
    </association>
    <collection property="fineDetail" ofType="jmu.hw.po.FineDetail">
      <id column="fine_id" jdbcType="INTEGER" property="fineId" />
      <id column="fine_detail_id" jdbcType="INTEGER" property="fineDetailId"/>
      <result column="fine_reason" jdbcType="CHAR" property="fineReason" />
      <result column="fine_univalence" jdbcType="DECIMAL" property="fineUnivalence" />
    </collection>
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    fine_id, reader_id, admin_id, book_id, fine_time, fine_total
  </sql>
   <sql id="Base_Column_List_With_All">
    fine.fine_id, reader.reader_id, admin_id, book.book_id, fine_time, fine_total,
    fine_detail.fine_id,fine_detail.fine_detail_id,fine_detail.fine_reason,fine_detail.fine_univalence,
    reader.reader_id,reader.user_name,
    book.book_id,book.book_callno,book_desc.book_callno,book_desc.book_name
  </sql>
  <select id="selectByExample" parameterType="jmu.hw.po.FineExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from fine
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from fine
    where fine_id = #{fineId,jdbcType=INTEGER}
  </select>
  <select id="selectByExampleWithAll" parameterType="jmu.hw.po.FineExample" resultMap="BaseResultMapWithAll">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List_With_All" />
    from (((fine left join fine_detail on fine.fine_id=fine_detail.fine_id) left join book on fine.book_id = book.book_id) left join book_desc on book.book_callno = book_desc.book_callno) 
    left join reader on reader.reader_id = fine.reader_id
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
   <select id="selectByExampleByReaderIdPart" parameterType="java.lang.String" resultMap="BaseResultMapWithAll">
    select
    <include refid="Base_Column_List_With_All" />
    from (((fine left join fine_detail on fine.fine_id=fine_detail.fine_id) left join book on fine.book_id = book.book_id) left join book_desc on book.book_callno = book_desc.book_callno) 
    left join reader on reader.reader_id = fine.reader_id
    where fine.reader_id like #{readerId,jdbcType=CHAR}
  </select>
   <select id="selectByExampleByUserNamePart" parameterType="java.lang.String" resultMap="BaseResultMapWithAll">
    select
    <include refid="Base_Column_List_With_All" />
    from (((fine left join fine_detail on fine.fine_id=fine_detail.fine_id) left join book on fine.book_id = book.book_id) left join book_desc on book.book_callno = book_desc.book_callno) 
    left join reader on reader.reader_id = fine.reader_id
    where reader.user_name like #{userName,jdbcType=CHAR}
  </select>
   <select id="selectByExampleByBookNamePart" parameterType="java.lang.String" resultMap="BaseResultMapWithAll">
    select
    <include refid="Base_Column_List_With_All" />
    from (((fine left join fine_detail on fine.fine_id=fine_detail.fine_id) left join book on fine.book_id = book.book_id) left join book_desc on book.book_callno = book_desc.book_callno) 
    left join reader on reader.reader_id = fine.reader_id
    where book_desc.book_name like #{bookName,jdbcType=CHAR}
  </select>
  <select id="selectByExampleByBookId" parameterType="java.lang.Integer" resultMap="BaseResultMapWithAll">
    select
    <include refid="Base_Column_List_With_All" />
    from (((fine left join fine_detail on fine.fine_id=fine_detail.fine_id) left join book on fine.book_id = book.book_id) left join book_desc on book.book_callno = book_desc.book_callno) 
    left join reader on reader.reader_id = fine.reader_id
    where fine.book_id = #{bookId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from fine
    where fine_id = #{fineId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="jmu.hw.po.FineExample">
    delete from fine
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="jmu.hw.po.Fine">
    insert into fine (fine_id, reader_id, admin_id, 
      book_id, fine_time, fine_total
      )
    values (#{fineId,jdbcType=INTEGER}, #{readerId,jdbcType=VARCHAR}, #{adminId,jdbcType=CHAR}, 
      #{bookId,jdbcType=INTEGER}, #{fineTime,jdbcType=DATE}, #{fineTotal,jdbcType=DECIMAL}
      )
  </insert>
  <insert id="insertSelective" parameterType="jmu.hw.po.Fine" keyProperty="fineId" keyColumn="fine_id" useGeneratedKeys="true">
    insert into fine
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="fineId != null">
        fine_id,
      </if>
      <if test="readerId != null">
        reader_id,
      </if>
      <if test="adminId != null">
        admin_id,
      </if>
      <if test="bookId != null">
        book_id,
      </if>
      <if test="fineTime != null">
        fine_time,
      </if>
      <if test="fineTotal != null">
        fine_total,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="fineId != null">
        #{fineId,jdbcType=INTEGER},
      </if>
      <if test="readerId != null">
        #{readerId,jdbcType=VARCHAR},
      </if>
      <if test="adminId != null">
        #{adminId,jdbcType=CHAR},
      </if>
      <if test="bookId != null">
        #{bookId,jdbcType=INTEGER},
      </if>
      <if test="fineTime != null">
        #{fineTime,jdbcType=DATE},
      </if>
      <if test="fineTotal != null">
        #{fineTotal,jdbcType=DECIMAL},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="jmu.hw.po.FineExample" resultType="java.lang.Long">
    select count(*) from fine
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update fine
    <set>
      <if test="record.fineId != null">
        fine_id = #{record.fineId,jdbcType=INTEGER},
      </if>
      <if test="record.readerId != null">
        reader_id = #{record.readerId,jdbcType=VARCHAR},
      </if>
      <if test="record.adminId != null">
        admin_id = #{record.adminId,jdbcType=CHAR},
      </if>
      <if test="record.bookId != null">
        book_id = #{record.bookId,jdbcType=INTEGER},
      </if>
      <if test="record.fineTime != null">
        fine_time = #{record.fineTime,jdbcType=DATE},
      </if>
      <if test="record.fineTotal != null">
        fine_total = #{record.fineTotal,jdbcType=DECIMAL},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update fine
    set fine_id = #{record.fineId,jdbcType=INTEGER},
      reader_id = #{record.readerId,jdbcType=VARCHAR},
      admin_id = #{record.adminId,jdbcType=CHAR},
      book_id = #{record.bookId,jdbcType=INTEGER},
      fine_time = #{record.fineTime,jdbcType=DATE},
      fine_total = #{record.fineTotal,jdbcType=DECIMAL}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="jmu.hw.po.Fine">
    update fine
    <set>
      <if test="readerId != null">
        reader_id = #{readerId,jdbcType=VARCHAR},
      </if>
      <if test="adminId != null">
        admin_id = #{adminId,jdbcType=CHAR},
      </if>
      <if test="bookId != null">
        book_id = #{bookId,jdbcType=INTEGER},
      </if>
      <if test="fineTime != null">
        fine_time = #{fineTime,jdbcType=DATE},
      </if>
      <if test="fineTotal != null">
        fine_total = #{fineTotal,jdbcType=DECIMAL},
      </if>
    </set>
    where fine_id = #{fineId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="jmu.hw.po.Fine">
    update fine
    set reader_id = #{readerId,jdbcType=VARCHAR},
      admin_id = #{adminId,jdbcType=CHAR},
      book_id = #{bookId,jdbcType=INTEGER},
      fine_time = #{fineTime,jdbcType=DATE},
      fine_total = #{fineTotal,jdbcType=DECIMAL}
    where fine_id = #{fineId,jdbcType=INTEGER}
  </update>
</mapper>